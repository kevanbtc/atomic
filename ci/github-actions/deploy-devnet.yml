name: Deploy to Devnet

on:
  push:
    branches:
      - develop
    paths:
      - 'contracts/**'
      - 'src/**'
      - 'docker/**'
      - 'scripts/deploy/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: 'false'
        type: boolean

env:
  NETWORK: devnet
  NODE_ENV: development
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/esg-api

jobs:
  pre-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_deploy: ${{ steps.changes.outputs.should_deploy }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for deployment changes
        id: changes
        run: |
          if git diff --quiet HEAD~1 HEAD -- contracts/ src/ docker/ scripts/deploy/; then
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Generate version
        id: version
        run: |
          VERSION=$(date +%Y%m%d)-${GITHUB_SHA:0:7}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated version: $VERSION"
      
      - name: Pre-deployment hook
        run: |
          npx claude-flow@alpha hooks pre-task --description "devnet CI deployment"

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linting
        run: npm run lint
      
      - name: Run type checking
        run: npm run typecheck
      
      - name: Compile contracts
        run: npm run compile
      
      - name: Run unit tests
        run: npm run test
        env:
          CI: true
      
      - name: Run contract tests
        run: npm run test:contracts
        env:
          CI: true
      
      - name: Generate test report
        if: always()
        uses: dorny/test-reporter@v1
        with:
          name: Contract Tests
          path: 'test-results.xml'
          reporter: jest-junit

  build:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [pre-deployment, test]
    if: needs.pre-deployment.outputs.should_deploy == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/base/Dockerfile.node
          target: production
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:devnet-latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:devnet-${{ needs.pre-deployment.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [pre-deployment, test, build]
    if: needs.pre-deployment.outputs.should_deploy == 'true' || github.event.inputs.force_deploy == 'true'
    environment: devnet
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Setup deployment environment
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEVNET_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.DEVNET_HOST }} >> ~/.ssh/known_hosts
      
      - name: Deploy to devnet
        env:
          DEVNET_RPC_URL: ${{ secrets.DEVNET_RPC_URL }}
          DEVNET_PRIVATE_KEY: ${{ secrets.DEVNET_PRIVATE_KEY }}
          DATABASE_URL: ${{ secrets.DEVNET_DATABASE_URL }}
          REDIS_URL: ${{ secrets.DEVNET_REDIS_URL }}
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          echo "ðŸš€ Starting devnet deployment..."
          ./scripts/deploy/deploy-devnet.sh
      
      - name: Update deployment status
        if: always()
        run: |
          npx claude-flow@alpha hooks post-task --task-id "devnet-ci-deploy" --status "${{ job.status }}"
      
      - name: Run post-deployment tests
        run: |
          sleep 30  # Wait for services to be ready
          npm run test:devnet:health
      
      - name: Store deployment info
        run: |
          npx claude-flow@alpha hooks post-edit --file "devnet-deployment" --memory-key "esg/deployment/devnet/ci-status"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.deploy.result }}
          channel: '#esg-deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()