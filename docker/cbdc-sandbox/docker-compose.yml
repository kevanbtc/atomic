# ESG System - CBDC Sandbox Docker Compose Configuration
# Production-grade environment for CBDC integration

version: '3.8'

services:
  # ESG API Service - High Availability
  esg-api-primary:
    build:
      context: ../..
      dockerfile: docker/base/Dockerfile.node
      target: production
    container_name: esg-api-primary-cbdc
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NETWORK=cbdc-sandbox
      - PORT=3000
      - DATABASE_URL=postgresql://esg_user:${POSTGRES_PASSWORD}@postgres-primary:5432/esg_cbdc
      - DATABASE_REPLICA_URL=postgresql://esg_user:${POSTGRES_PASSWORD}@postgres-replica:5432/esg_cbdc
      - REDIS_URL=redis://redis-cluster:6379
      - BLOCKCHAIN_RPC=${CBDC_RPC_URL}
      - LOG_LEVEL=warn
      - SENTRY_DSN=${SENTRY_DSN}
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - CBDC_API_ENDPOINT=${CBDC_API_ENDPOINT}
      - CBDC_API_KEY=${CBDC_API_KEY}
    ports:
      - "3000:3000"
    volumes:
      - ../../config:/app/config:ro
      - app_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - postgres-primary
      - redis-cluster
      - vault
    networks:
      - esg-cbdc
      - monitoring
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 15s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "3"

  # ESG API Secondary for Load Balancing
  esg-api-secondary:
    build:
      context: ../..
      dockerfile: docker/base/Dockerfile.node
      target: production
    container_name: esg-api-secondary-cbdc
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NETWORK=cbdc-sandbox
      - PORT=3000
      - DATABASE_URL=postgresql://esg_user:${POSTGRES_PASSWORD}@postgres-primary:5432/esg_cbdc
      - DATABASE_REPLICA_URL=postgresql://esg_user:${POSTGRES_PASSWORD}@postgres-replica:5432/esg_cbdc
      - REDIS_URL=redis://redis-cluster:6379
      - BLOCKCHAIN_RPC=${CBDC_RPC_URL}
      - LOG_LEVEL=warn
      - SENTRY_DSN=${SENTRY_DSN}
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=${VAULT_TOKEN}
      - CBDC_API_ENDPOINT=${CBDC_API_ENDPOINT}
      - CBDC_API_KEY=${CBDC_API_KEY}
    volumes:
      - ../../config:/app/config:ro
      - app_logs:/app/logs
    depends_on:
      - postgres-primary
      - redis-cluster
      - vault
    networks:
      - esg-cbdc
      - monitoring
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # PostgreSQL Primary with Replication
  postgres-primary:
    image: postgres:15-alpine
    container_name: postgres-primary-cbdc
    restart: unless-stopped
    environment:
      - POSTGRES_DB=esg_cbdc
      - POSTGRES_USER=esg_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_REPLICATION_USER=replicator
      - POSTGRES_REPLICATION_PASSWORD=${POSTGRES_REPLICATION_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_primary:/var/lib/postgresql/data
      - ./postgres/primary.conf:/etc/postgresql/postgresql.conf:ro
      - ./postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./backups:/backups
    networks:
      - esg-cbdc
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    deploy:
      resources:
        limits:
          memory: 4G

  # PostgreSQL Replica for Read Operations
  postgres-replica:
    image: postgres:15-alpine
    container_name: postgres-replica-cbdc
    restart: unless-stopped
    environment:
      - POSTGRES_USER=esg_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGUSER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_MASTER_SERVICE=postgres-primary
    volumes:
      - postgres_replica:/var/lib/postgresql/data
      - ./postgres/replica.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - esg-cbdc
    depends_on:
      - postgres-primary
    deploy:
      resources:
        limits:
          memory: 4G

  # Redis Cluster for High Availability
  redis-cluster:
    image: redis:7-alpine
    container_name: redis-cluster-cbdc
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_cluster:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    networks:
      - esg-cbdc
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 2G

  # IPFS with Enterprise Features
  ipfs-cluster:
    image: ipfs/ipfs-cluster:latest
    container_name: ipfs-cluster-cbdc
    restart: unless-stopped
    environment:
      - CLUSTER_PEERNAME=esg-cbdc-node
      - CLUSTER_SECRET=${IPFS_CLUSTER_SECRET}
      - CLUSTER_IPFSHTTP_NODEMULTIADDRESS=/dns4/ipfs/tcp/5001
      - CLUSTER_CRDT_TRUSTEDPEERS=*
      - CLUSTER_RESTAPI_HTTPLISTENMULTIADDRESS=/ip4/0.0.0.0/tcp/9094
      - CLUSTER_MONITORPINGINTERVAL=2s
      - IPFS_BOOTSTRAP_RM_ALL=true
    ports:
      - "9094:9094"
      - "9096:9096"
    volumes:
      - ipfs_cluster:/data/ipfs-cluster
    networks:
      - esg-cbdc
    depends_on:
      - ipfs

  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: ipfs-cbdc
    restart: unless-stopped
    environment:
      - IPFS_PROFILE=server
      - IPFS_PATH=/data/ipfs
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - esg-cbdc

  # HashiCorp Vault for Secrets Management
  vault:
    image: vault:1.13
    container_name: vault-cbdc
    restart: unless-stopped
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://vault:8200
      - VAULT_LOCAL_CONFIG=${VAULT_LOCAL_CONFIG}
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./vault/config:/vault/config:ro
    networks:
      - esg-cbdc
      - monitoring
    cap_add:
      - IPC_LOCK
    deploy:
      resources:
        limits:
          memory: 1G

  # Load Balancer with SSL Termination
  nginx:
    image: nginx:alpine
    container_name: nginx-cbdc
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../config/nginx/cbdc-sandbox.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/ssl/certs:ro
      - ssl_private:/etc/ssl/private:ro
    depends_on:
      - esg-api-primary
      - esg-api-secondary
    networks:
      - esg-cbdc
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M

  # Production Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-cbdc
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ../../config/monitoring/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - monitoring
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    deploy:
      resources:
        limits:
          memory: 2G

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-cbdc
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SERVER_ROOT_URL=https://dashboard.esg-cbdc.com
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../config/monitoring/grafana-prod:/etc/grafana/provisioning:ro
    networks:
      - monitoring
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G

  # Enterprise Log Management
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: elasticsearch-cbdc
    restart: unless-stopped
    environment:
      - cluster.name=esg-cbdc-cluster
      - node.name=es-node-1
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.http.ssl.enabled=true
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - elasticsearch_config:/usr/share/elasticsearch/config
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 4G

  kibana:
    image: kibana:8.8.0
    container_name: kibana-cbdc
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=https://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - SERVER_HOST=0.0.0.0
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 1G

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager-cbdc
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - alertmanager_data:/alertmanager
      - ../../config/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
    networks:
      - monitoring
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'

volumes:
  postgres_primary:
  postgres_replica:
  redis_cluster:
  ipfs_data:
  ipfs_cluster:
  vault_data:
  vault_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  elasticsearch_config:
  alertmanager_data:
  app_logs:
  ssl_certs:
  ssl_private:

networks:
  esg-cbdc:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  monitoring:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16