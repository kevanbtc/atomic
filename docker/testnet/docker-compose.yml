# ESG System - Testnet Docker Compose Configuration
# Testing environment with monitoring and security

version: '3.8'

services:
  # ESG API Service
  esg-api:
    build:
      context: ../..
      dockerfile: docker/base/Dockerfile.node
      target: production
    container_name: esg-api-testnet
    restart: unless-stopped
    environment:
      - NODE_ENV=testing
      - NETWORK=testnet
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:test_secure_password@postgres:5432/esg_testnet
      - REDIS_URL=redis://redis:6379
      - BLOCKCHAIN_RPC=${TESTNET_RPC_URL}
      - LOG_LEVEL=info
      - SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "3000:3000"
    volumes:
      - ../../config:/app/config:ro
      - app_logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - esg-testnet
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database with backup
  postgres:
    image: postgres:15-alpine
    container_name: postgres-testnet
    restart: unless-stopped
    environment:
      - POSTGRES_DB=esg_testnet
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test_secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_testnet:/var/lib/postgresql/data
      - ./backups:/backups
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - esg-testnet
    deploy:
      resources:
        limits:
          memory: 2G

  # Redis with persistence
  redis:
    image: redis:7-alpine
    container_name: redis-testnet
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_testnet:/data
    networks:
      - esg-testnet
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}

  # IPFS with pinning service
  ipfs:
    image: ipfs/go-ipfs:latest
    container_name: ipfs-testnet
    restart: unless-stopped
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs_testnet:/data/ipfs
    networks:
      - esg-testnet
    environment:
      - IPFS_PROFILE=server

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-testnet
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - prometheus_testnet:/prometheus
      - ../../config/monitoring/prometheus:/etc/prometheus:ro
    networks:
      - esg-testnet
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-testnet
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_testnet:/var/lib/grafana
      - ../../config/monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - esg-testnet
    depends_on:
      - prometheus

  # Log Management
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: elasticsearch-testnet
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_testnet:/usr/share/elasticsearch/data
    networks:
      - esg-testnet

  kibana:
    image: kibana:8.8.0
    container_name: kibana-testnet
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - esg-testnet

  # Security Scanning
  vault:
    image: vault:latest
    container_name: vault-testnet
    restart: unless-stopped
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_ROOT_TOKEN}
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_testnet:/vault/data
    networks:
      - esg-testnet
    cap_add:
      - IPC_LOCK

  # Load Balancer
  nginx:
    image: nginx:alpine
    container_name: nginx-testnet
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../../config/nginx/testnet.conf:/etc/nginx/nginx.conf:ro
      - ssl_certs:/etc/ssl/certs:ro
    depends_on:
      - esg-api
    networks:
      - esg-testnet

volumes:
  postgres_testnet:
  redis_testnet:
  ipfs_testnet:
  prometheus_testnet:
  grafana_testnet:
  elasticsearch_testnet:
  vault_testnet:
  app_logs:
  ssl_certs:

networks:
  esg-testnet:
    driver: bridge